<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@1.1.26">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <refspec>+refs/heads/master:refs/remotes/origin/master</refspec>
        <url>git://gerrit.ovirt.org/vdsm</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>true</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <useShallowClone>false</useShallowClone>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>false</skipTag>
    <includedRegions></includedRegions>
    <scmName></scmName>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector">
    <hudson.triggers.SCMTrigger>
      <spec>H * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set -e
set -v

LOCALBUILD=&quot;N&quot;
if [ 1 ]; then
    BUILDERDIR=&quot;$(pwd)/builder&quot;
    RPMTOPDIR=&quot;$(pwd)/rpmbuild&quot;
    LOCALBUILD=&quot;Y&quot;
    # shift
else
    BUILDERDIR=&quot;$HOME/builder&quot;
    RPMTOPDIR=&quot;$HOME/rpmbuild&quot;
fi

# Make things clean.

test -n &quot;$1&quot; &amp;&amp; RESULTS=$1 || RESULTS=results.log
: ${AUTOBUILD_INSTALL_ROOT=$HOME/builder}

test -f Makefile &amp;&amp; make -k distclean || :
find . -name &apos;*.pyc&apos; | xargs rm -f
find . -name &apos;*.pyo&apos; | xargs rm -f
if [ &quot;$LOCALBUILD&quot; = &quot;Y&quot; ]; then
    echo rm -rf &quot;$BUILDERDIR&quot;
    echo rm -rf &quot;$RPMTOPDIR&quot;
fi

./autogen.sh --prefix=&quot;$BUILDERDIR&quot;

# If the MAKEFLAGS envvar does not yet include a -j option,
# add -jN where N depends on the number of processors.
case $MAKEFLAGS in
  *-j*) ;;
  *) n=$(getconf _NPROCESSORS_ONLN 2&gt; /dev/null)
    test &quot;$n&quot; -gt 0 || n=1
    n=$(expr $n + 1)
    MAKEFLAGS=&quot;$MAKEFLAGS -j$n&quot;
    export MAKEFLAGS
    ;;
esac

make
make install

# set -o pipefail is a bashism; this use of exec is the POSIX alternative
#exec 3&gt;&amp;1
#st=$(
#  exec 4&gt;&amp;1 &gt;&amp;3
#  { make check 2&gt;&amp;1 3&gt;&amp;- 4&gt;&amp;-; echo $? &gt;&amp;4; } | tee &quot;$RESULTS&quot;
#)
#exec 3&gt;&amp;-
#test &quot;$st&quot; = 0

rm -f *.tar.gz
make dist

if [ -n &quot;$AUTOBUILD_COUNTER&quot; ]; then
  EXTRA_RELEASE=&quot;.auto$AUTOBUILD_COUNTER&quot;
else
  NOW=`date +&quot;%s&quot;`
  EXTRA_RELEASE=&quot;.$USER$NOW&quot;
fi

if [ -f /usr/bin/rpmbuild ]; then
  NOSE_EXCLUDE=.* rpmbuild --nodeps \
     --define &quot;extra_release $EXTRA_RELEASE&quot; \
     --define &quot;_sourcedir `pwd`&quot; \
     --define &quot;_topdir $RPMTOPDIR&quot; \
     -ba --clean vdsm.spec
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>RPMTOPDIR=&quot;$(pwd)/rpmbuild&quot;

joinlines() {
	local lines=&quot;$1&quot;
	local line=&quot;&quot;
	local sep=&quot;$2&quot;
	local joined=&quot;&quot;
	for line in &quot;$lines&quot;; do
		joined=&quot;${joined}${sep}${line}&quot;
	done
	printf &quot;$joined&quot;
}

cd &quot;$RPMTOPDIR&quot;
packages=$(find . -name &quot;*.rpm&quot; | grep -v &quot;\.src\.rpm&quot;)
yum -y remove &quot;vdsm*&quot;
yum -y localinstall $(joinlines &quot;$packages&quot; &quot; &quot;)</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>systemctl start vdsmd.service
sleep 20
systemctl status vdsmd.service</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>OLDDIR=&quot;$(pwd)&quot;
TESTREPORT=&quot;vdsm-$BUILD_TAG.xml&quot;
cd /usr/share/vdsm/tests
./run_tests.sh --with-xunit --xunit-file &quot;$TESTREPORT&quot; functional/*.py
systemctl stop vdsmd.service
cp &quot;$TESTREPORT&quot; &quot;$OLDDIR/nosetests.xml&quot;</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.junit.JUnitResultArchiver>
      <testResults>nosetests.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers/>
    </hudson.tasks.junit.JUnitResultArchiver>
  </publishers>
  <buildWrappers/>
</project>